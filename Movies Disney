create table movies 
(id int not null primary key,
title varchar (20),
Director varchar (20),
year_ numeric(4),
Length_minutes numeric(3));

insert into movies values
    (1,'Toy Story','John Lasseter',1995,81),
    (2,'A Bug´s Life','John Lasseter',1998,95),
    (3,'Toy Story 2','John Lasseter',1999,93),
    (4,'Monsters, Inc.','Pete Docter',2001,92),
    (5,'Finding Nemo','Andrew Stanton',2003,107),
    (6,'The Incredibles','Brad Bird',2004,116),
    (7,'Cars','John Lasseter',2006,117),
    (8,'Ratatouille','Brad Bird',2007,115),
    (9,'WALL-E','Andrew Stanton',2008,104),
    (10,'Up','Pete Docter',2009,101),
    (11,'Toy Story 3','Lee Unkrich',2010,103),
    (12,'Cars 2','John Lasseter',2011,120),
    (13,'Brave','Brenda Chapman',2012,102),
    (14,'Monsters University','Dan Scanlon',2013,110)
    ;

	select * 
	from movies

LIKE
*** Find all the Toy Story movies
*** Find all the movies directed by John Lasseter
*** Find all the movies (and director) not directed by John Lasseter
*** Find all the WALL-* movies

select * 
from movies 
where title like ´Toy Story%´

select *
from movies 
where director like ´John Lasseter´

Select movie, director 
from movies 
where director not like ´John Lasseter´

select * 
from movies 
where title like ´Wall%´

DISTINCT TOP
*** List all directors of Pixar movies (alphabetically), without duplicates
*** List the last four Pixar movies released (ordered from most recent to least)

select distinct director 
from movies 
order by director asc

SELECT TOP 4 title, year_ FROM movies
ORDER BY year_ DESC


** NEW TABLE 

CREATE TABLE Boxoffice
(movie_id int not null primary key, 
rating decimal (18,2),
Domestic_sales numeric (20),
International_sales numeric (20)
);

insert into boxoffice values
(5,8.2,380843261,555900000),
(14,7.4,268492764,475066843),
(8,8,206445654,417277164),
(12,6.4,191452396,368400000),
(3,7.9,245852179,239163000),
(6,8,261441092,370001000),
(9,8.5,223808164,297503696),
(11,8.4,415004880,648167031),
(1,8.3,191796233,170162503),
(7,7.2,244082982,217900167),
(10,8.3,293004164,438338580),
(4,8.1,289916256,272900000),
(2,7.2,162798565,200600000),
(13,7.2,237283207,301700000);

*** JOIN 
--Find the domestic and international sales for each movie
--Show the sales numbers for each movie that did better internationally rather than domestically
-- List all the movies by their ratings in descending order 

select m.title, b.domestic_sales, b.international_sales 
from movies m
join Boxoffice b
on m.id = b.movie_id

select m.title, b.domestic_sales, b.international_sales 
from movies m
join Boxoffice b
on m.id = b.movie_id
where International_sales > Domestic_sales

select m.title, b.rating 
from movies m
join Boxoffice b
on m.id = b.movie_id
order by rating desc



